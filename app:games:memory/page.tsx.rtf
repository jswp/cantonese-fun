{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 "use client"\
\
import \{ useState, useEffect \} from "react"\
import \{ Button \} from "@/components/ui/button"\
import \{ Card \} from "@/components/ui/card"\
import \{ ArrowLeft \} from "lucide-react"\
import Link from "next/link"\
\
// Define the card type\
type MemoryCard = \{\
  id: number\
  content: string\
  translation: string\
  flipped: boolean\
  matched: boolean\
\}\
\
export default function MemoryGame() \{\
  // Sample vocabulary pairs\
  const vocabularyPairs = [\
    \{ cantonese: "\uc0\u20320 \u22909 ", english: "Hello" \},\
    \{ cantonese: "\uc0\u35613 \u35613 ", english: "Thank you" \},\
    \{ cantonese: "\uc0\u20877 \u35211 ", english: "Goodbye" \},\
    \{ cantonese: "\uc0\u26089 \u26216 ", english: "Good morning" \},\
    \{ cantonese: "\uc0\u26202 \u23433 ", english: "Good night" \},\
    \{ cantonese: "\uc0\u26379 \u21451 ", english: "Friend" \},\
  ]\
\
  // Create cards from vocabulary pairs\
  const createCards = () => \{\
    const cards: MemoryCard[] = []\
    vocabularyPairs.forEach((pair, index) => \{\
      // Cantonese card\
      cards.push(\{\
        id: index * 2,\
        content: pair.cantonese,\
        translation: pair.english,\
        flipped: false,\
        matched: false,\
      \})\
      // English card\
      cards.push(\{\
        id: index * 2 + 1,\
        content: pair.english,\
        translation: pair.cantonese,\
        flipped: false,\
        matched: false,\
      \})\
    \})\
    return shuffleCards(cards)\
  \}\
\
  // Shuffle cards\
  const shuffleCards = (cards: MemoryCard[]) => \{\
    return [...cards].sort(() => Math.random() - 0.5)\
  \}\
\
  const [cards, setCards] = useState<MemoryCard[]>([])\
  const [flippedCards, setFlippedCards] = useState<number[]>([])\
  const [matchedPairs, setMatchedPairs] = useState<number>(0)\
  const [moves, setMoves] = useState<number>(0)\
  const [gameComplete, setGameComplete] = useState<boolean>(false)\
\
  // Initialize game\
  useEffect(() => \{\
    setCards(createCards())\
  \}, [])\
\
  // Check for matches when two cards are flipped\
  useEffect(() => \{\
    if (flippedCards.length === 2) \{\
      const [firstIndex, secondIndex] = flippedCards\
      const firstCard = cards[firstIndex]\
      const secondCard = cards[secondIndex]\
\
      // Check if translations match\
      if (firstCard.content === secondCard.translation || secondCard.content === firstCard.translation) \{\
        // Match found\
        setCards((prevCards) =>\
          prevCards.map((card, index) => \{\
            if (index === firstIndex || index === secondIndex) \{\
              return \{ ...card, matched: true \}\
            \}\
            return card\
          \}),\
        )\
        setMatchedPairs((prev) => prev + 1)\
        setFlippedCards([])\
      \} else \{\
        // No match, flip cards back after delay\
        setTimeout(() => \{\
          setCards((prevCards) =>\
            prevCards.map((card, index) => \{\
              if (index === firstIndex || index === secondIndex) \{\
                return \{ ...card, flipped: false \}\
              \}\
              return card\
            \}),\
          )\
          setFlippedCards([])\
        \}, 1000)\
      \}\
      setMoves((prev) => prev + 1)\
    \}\
  \}, [flippedCards, cards])\
\
  // Check if game is complete\
  useEffect(() => \{\
    if (matchedPairs === vocabularyPairs.length && matchedPairs > 0) \{\
      setGameComplete(true)\
    \}\
  \}, [matchedPairs])\
\
  // Handle card click\
  const handleCardClick = (index: number) => \{\
    // Prevent clicking if already two cards flipped or card already matched/flipped\
    if (flippedCards.length === 2 || cards[index].matched || cards[index].flipped || flippedCards.includes(index)) \{\
      return\
    \}\
\
    // Flip the card\
    setCards((prevCards) =>\
      prevCards.map((card, i) => \{\
        if (i === index) \{\
          return \{ ...card, flipped: true \}\
        \}\
        return card\
      \}),\
    )\
\
    // Add to flipped cards\
    setFlippedCards((prev) => [...prev, index])\
  \}\
\
  // Reset game\
  const resetGame = () => \{\
    setCards(createCards())\
    setFlippedCards([])\
    setMatchedPairs(0)\
    setMoves(0)\
    setGameComplete(false)\
  \}\
\
  return (\
    <div className="container py-10">\
      <div className="flex items-center mb-6">\
        <Link href="/games">\
          <Button variant="ghost" size="icon" className="mr-2">\
            <ArrowLeft className="h-5 w-5" />\
          </Button>\
        </Link>\
        <h1 className="text-3xl font-bold">Memory Match Game</h1>\
      </div>\
\
      <div className="flex flex-col md:flex-row gap-6">\
        <div className="md:w-3/4">\
          <div className="bg-yellow-50 p-6 rounded-lg">\
            <div className="grid grid-cols-3 md:grid-cols-4 gap-4">\
              \{cards.map((card, index) => (\
                <div\
                  key=\{index\}\
                  className=\{`aspect-[3/4] cursor-pointer transition-all duration-300 transform $\{\
                    card.flipped ? "rotate-y-180" : ""\
                  \}`\}\
                  onClick=\{() => handleCardClick(index)\}\
                >\
                  <div\
                    className=\{`relative w-full h-full transition-transform duration-500 transform-style-preserve-3d $\{\
                      card.flipped ? "rotate-y-180" : ""\
                    \}`\}\
                  >\
                    \{/* Card Back */\}\
                    <div\
                      className=\{`absolute w-full h-full flex items-center justify-center rounded-lg border-2 $\{\
                        card.flipped ? "hidden" : "bg-gradient-to-r from-yellow-400 to-orange-400"\
                      \} $\{card.matched ? "border-green-500" : "border-yellow-300"\}`\}\
                    >\
                      <span className="text-2xl">\uc0\u55357 \u56380 </span>\
                    </div>\
\
                    \{/* Card Front */\}\
                    <div\
                      className=\{`absolute w-full h-full backface-hidden $\{\
                        card.flipped ? "block" : "hidden"\
                      \} bg-white rounded-lg border-2 $\{\
                        card.matched ? "border-green-500" : "border-yellow-300"\
                      \} flex items-center justify-center`\}\
                    >\
                      <div className="text-center">\
                        <p className="text-xl font-bold">\{card.content\}</p>\
                        \{card.matched && <p className="text-sm text-muted-foreground mt-1">\{card.translation\}</p>\}\
                      </div>\
                    </div>\
                  </div>\
                </div>\
              ))\}\
            </div>\
          </div>\
        </div>\
\
        <div className="md:w-1/4">\
          <Card className="p-4">\
            <div className="space-y-4">\
              <div>\
                <h2 className="text-xl font-bold">Game Stats</h2>\
                <p className="text-muted-foreground">Match Cantonese words with their English translations</p>\
              </div>\
\
              <div className="space-y-2">\
                <div className="flex justify-between">\
                  <span>Pairs Found:</span>\
                  <span className="font-bold">\
                    \{matchedPairs\} / \{vocabularyPairs.length\}\
                  </span>\
                </div>\
                <div className="flex justify-between">\
                  <span>Moves:</span>\
                  <span className="font-bold">\{moves\}</span>\
                </div>\
              </div>\
\
              <Button onClick=\{resetGame\} className="w-full bg-yellow-500 hover:bg-yellow-600">\
                New Game\
              </Button>\
\
              \{gameComplete && (\
                <div className="bg-green-100 p-3 rounded-lg text-center">\
                  <p className="font-bold text-green-800">Congratulations! \uc0\u55356 \u57225 </p>\
                  <p className="text-green-700">You completed the game in \{moves\} moves!</p>\
                </div>\
              )\}\
            </div>\
          </Card>\
        </div>\
      </div>\
    </div>\
  )\
\}\
}