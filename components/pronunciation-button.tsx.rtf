{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 "use client"\
\
import \{ useState \} from "react"\
import \{ Button \} from "@/components/ui/button"\
import \{ VolumeIcon \} from "lucide-react"\
\
interface PronunciationButtonProps \{\
  text: string\
  audioUrl?: string\
  className?: string\
\}\
\
export default function PronunciationButton(\{ text, audioUrl, className \}: PronunciationButtonProps) \{\
  const [isPlaying, setIsPlaying] = useState(false)\
\
  // This is a placeholder function that would normally play audio\
  // In a real implementation, you would use the Web Audio API or HTML5 Audio\
  const playPronunciation = () => \{\
    setIsPlaying(true)\
\
    // Simulate audio playing with a timeout\
    setTimeout(() => \{\
      setIsPlaying(false)\
    \}, 1500)\
\
    // If we had a real audio URL, we would play it like this:\
    // const audio = new Audio(audioUrl)\
    // audio.play()\
  \}\
\
  return (\
    <Button variant="ghost" size="icon" className=\{className\} onClick=\{playPronunciation\} disabled=\{isPlaying\}>\
      <VolumeIcon className=\{`h-4 w-4 $\{isPlaying ? "text-yellow-500 animate-pulse" : ""\}`\} />\
      <span className="sr-only">Pronounce \{text\}</span>\
    </Button>\
  )\
\}\
}